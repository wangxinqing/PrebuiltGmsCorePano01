package defpackage;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import java.util.Locale;
import java.util.Map;

/* renamed from: kkc  reason: default package */
/* compiled from: :com.google.android.gms@201216073@20.12.16 (080306-306753009) */
public final class kkc extends kjs {
    public final lhx a;
    public long b = -1;

    public kkc(Context context, String str, lhx lhx) {
        super(context, str, str, kka.values(), 173, 172);
        this.a = lhx;
    }

    private static String a(String str) {
        return String.valueOf(str).concat(" IS NOT NULL");
    }

    private static void b(SQLiteDatabase sQLiteDatabase, String str, String str2) {
        String a2 = knj.SIZE_BYTES.k.a();
        int length = str.length();
        StringBuilder sb = new StringBuilder(length + 61 + String.valueOf(a2).length() + str2.length());
        sb.append("CREATE VIEW IF NOT EXISTS ");
        sb.append(str);
        sb.append(" AS  SELECT ifnull(sum(");
        sb.append(a2);
        sb.append("), 0) FROM ");
        sb.append(str2);
        sb.append(";");
        sQLiteDatabase.execSQL(sb.toString());
    }

    public final void c(SQLiteDatabase sQLiteDatabase) {
        SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
        String a2 = kne.LOCAL_CONTENT_HASH.aB.a();
        String format = String.format(Locale.US, "(%s IS NOT NULL AND (%s IS NOT NULL OR %s = %s))", new Object[]{a2, kne.LAST_CONTENT_ACTION_ID.aB.a(), kne.HEAD_REVISION_ID.aB.a(), kne.INSYNC_REVISION_ID.aB.a()});
        krc a3 = krc.a(knf.a);
        a3.a(kmk.a.a.a(), "_id");
        a3.b();
        krb b2 = krb.b(kmk.a.b());
        String a4 = kmk.a.a.a();
        String b3 = kne.ENTRY_ID.aB.b();
        StringBuilder sb = new StringBuilder(String.valueOf(a4).length() + 1 + String.valueOf(b3).length());
        sb.append(a4);
        sb.append("=");
        sb.append(b3);
        b2.a = sb.toString();
        a3.a(b2);
        a(sQLiteDatabase2, "EntryView", (kqx) a3);
        a(sQLiteDatabase2, "ScopedEntryView", "EntryView");
        kqu kqu = new kqu();
        kqu.a(kmk.a.a.a(), "_id");
        kqu.a(kmk.a.a.a(), "sqlId");
        kqu.a(String.format(Locale.US, "IFNULL(%s,'%s')", new Object[]{kmj.RESOURCE_ID.c.a(), "generated-android-null"}), "resourceId");
        kqu.a((lsb) kne.TITLE, (kyq) lce.Q);
        kqu.a((lsb) kne.PINNED, (kyq) lce.M);
        kqu.a((lsb) kne.IS_DOWNLOADABLE, lce.o);
        kqu.a((lsb) kne.MIME_TYPE, (kyq) lce.N);
        kqu.a((lsb) kne.LAST_MODIFIED_DATE, (kyq) lch.c);
        kqu.a((lsb) kne.MODIFIED_BY_ME_DATE, (kyq) lch.d);
        kqu.a((lsb) kne.CREATION_DATE, (kyq) lch.a);
        kqu.a((lsb) kne.SHARED_WITH_ME_DATE, (kyq) lch.e);
        kqu.a((lsb) kne.TRASHED, (kyq) lce.B);
        kqu.a((lsb) kne.CAN_EDIT, lce.l);
        kqu.a((lsb) kne.SHARED, lce.q);
        kqu.a((lsb) kne.ALTERNATE_LINK, lce.b);
        kqu.a((lsb) kne.OWNER_NAMES, (kyq) lce.w);
        kqu.a((lsb) kne.DESCRIPTION, lce.c);
        kqu.a((lsb) kne.IS_COPYABLE, lce.k);
        kqu.a((lsb) kne.EMBED_LINK, lce.d);
        kqu.a((lsb) kne.FILE_EXTENSION, lce.e);
        kqu.a((lsb) kne.FILE_SIZE, lce.f);
        kqu.a((lsb) kne.FOLDER_COLOR_RGB, lce.g);
        kqu.a((lsb) kne.IS_VIEWED, lce.u);
        kqu.a((lsb) kne.IS_RESTRICTED, lce.p);
        kqu.a((lsb) kne.ORIGINAL_FILENAME, lce.v);
        kqu.a((lsb) kne.QUOTA_BYTES_USED, (kyq) lce.O);
        kqu.a((lsb) kne.WEB_CONTENT_LINK, lce.C);
        kqu.a((lsb) kne.WEB_VIEW_LINK, lce.D);
        kqu.a((lsb) kne.HAS_THUMBNAIL, lce.h);
        kqu.a((lsb) kne.USER_ROLE, lce.G);
        kqu.a((lsb) kne.MD5_CHECKSUM, lce.H);
        kqu.a((lsb) kne.WRITERS_CAN_SHARE, (kyq) lce.F);
        kqu.a((lsb) kne.LAST_VIEWED_BY_ME_DATE, (kyq) lch.b);
        kqu.a((lsb) kne.STARRED, (kyq) lce.P);
        kqu.a((lsb) kne.IS_GOOGLE_PHOTOS, lce.r);
        kqu.a((lsb) kne.IS_GOOGLE_PHOTOS_ROOT_FOLDER, lce.s);
        kqu.a((lsb) kne.RECENCY, (kyq) lch.f);
        kqu.a((lsb) kne.RECENCY_REASON, lce.J);
        kqu.a(String.valueOf(kne.CUSTOM_PROPERTIES_COUNT.aB.a()).concat(" != 0"), "hasCustomProperties");
        String a5 = kne.APPDATA_OWNER_SDK_APP_ID.aB.a();
        StringBuilder sb2 = new StringBuilder(String.valueOf(a5).length() + 14);
        sb2.append("(");
        sb2.append(a5);
        sb2.append(" IS NOT NULL)");
        kqu.a(sb2.toString(), ((kyl) lce.j).a);
        StringBuilder sb3 = new StringBuilder(String.valueOf(a2).length() + 14);
        sb3.append("(");
        sb3.append(a2);
        sb3.append(" IS NOT NULL)");
        kqu.a(sb3.toString(), ((kyl) lcj.a).a);
        String a6 = kne.MIME_TYPE.aB.a();
        String a7 = kne.MIME_TYPE.aB.a();
        String a8 = kne.TRASHED.aB.a();
        String a9 = kne.IS_DOWNLOADABLE.aB.a();
        int length = String.valueOf(a6).length();
        int length2 = String.valueOf(a7).length();
        StringBuilder sb4 = new StringBuilder(length + 110 + length2 + String.valueOf(a8).length() + String.valueOf(a9).length());
        sb4.append("((NOT (LIKE('application/vnd.google-apps.folder',");
        sb4.append(a6);
        sb4.append(") OR LIKE('application/vnd.google-apps%',");
        sb4.append(a7);
        sb4.append("))) AND (NOT ");
        sb4.append(a8);
        sb4.append(") AND ");
        sb4.append(a9);
        sb4.append(")");
        kqu.a(sb4.toString(), ((kyl) lcj.b).a);
        kqu.a(format, ((kyl) lce.n).a);
        kqu.a((lsb) kne.SUBSCRIBED, lce.K);
        kqu kqu2 = new kqu();
        kqu2.a((lsb) kqe.PERMISSIONS_ID, "permissionId");
        kqu2.a((lsb) kqe.DISPLAY_NAME, "displayName");
        kqu2.a((lsb) kqe.PICTURE_URL, "picture");
        kqu2.a((lsb) kqe.IS_AUTHENTICATED_USER, "isAuthenticatedUser");
        kqu2.a((lsb) kqe.EMAIL_ADDRESS, "emailAddress");
        String a10 = kqf.a.a.a();
        krc a11 = krc.a("EntryView");
        String a12 = kmk.a.a.a();
        a11.a(a12, a12);
        a11.a((lsb) kmj.ACCOUNT_ID);
        a11.a((lsb) kne.ENTRY_ID);
        a11.a((lsb) kne.IS_DELETED);
        a11.a((lsb) kne.APPDATA_OWNER_SDK_APP_ID);
        a11.a((lsb) kne.LAST_MODIFIED_DATE);
        a11.a((lsb) kne.SUBSCRIBED);
        a11.a((lsb) kne.SEQUENCE_NUMBER);
        a11.a((lsb) kne.IN_DRIVE_SPACE);
        a11.a((lsb) kne.IN_PHOTOS_SPACE);
        kqu kqu3 = a11.a;
        for (Map.Entry entry : kqu.a.entrySet()) {
            kqu3.a((String) entry.getValue(), (String) entry.getKey());
        }
        a11.a(kqu2, "lastModifyingUserJoin", lce.x.a);
        a11.a(kqu2, "sharingUserJoin", lce.y.a);
        krb a13 = krb.a(kqf.a.b());
        a13.b = "sharingUserJoin";
        String a14 = kne.SHARING_USER.aB.a();
        StringBuilder sb5 = new StringBuilder(String.valueOf(a10).length() + 27 + String.valueOf(a14).length());
        sb5.append("sharingUserJoin.");
        sb5.append(a10);
        sb5.append("=EntryView.");
        sb5.append(a14);
        a13.a = sb5.toString();
        a11.a(a13);
        krb a15 = krb.a(kqf.a.b());
        a15.b = "lastModifyingUserJoin";
        String a16 = kne.LAST_MODIFYING_USER.aB.a();
        StringBuilder sb6 = new StringBuilder(String.valueOf(a10).length() + 33 + String.valueOf(a16).length());
        sb6.append("lastModifyingUserJoin.");
        sb6.append(a10);
        sb6.append("=EntryView.");
        sb6.append(a16);
        a15.a = sb6.toString();
        a11.a(a15);
        a(sQLiteDatabase2, "MetadataView", (kqx) a11);
        a(sQLiteDatabase2, "ScopedMetadataView", "MetadataView");
        String a17 = kmg.a.a.a();
        String a18 = klh.DRIVE_APP_ID.j.a();
        StringBuilder sb7 = new StringBuilder(String.valueOf(a17).length() + 3 + String.valueOf(a18).length());
        sb7.append(a17);
        sb7.append(" = ");
        sb7.append(a18);
        String sb8 = sb7.toString();
        krc a19 = krc.a(kli.a.b());
        a19.b();
        krb b4 = krb.b(kmg.a.b());
        b4.a = sb8;
        a19.a(b4);
        a(sQLiteDatabase2, "AndroidAppView", (kqx) a19);
        String a20 = kmk.a.a.a();
        String b5 = kny.PARENT_ENTRY_ID.c.b();
        StringBuilder sb9 = new StringBuilder(String.valueOf(a20).length() + 1 + String.valueOf(b5).length());
        sb9.append(a20);
        sb9.append("=");
        sb9.append(b5);
        String sb10 = sb9.toString();
        krc a21 = krc.a(kmk.a);
        a21.b();
        krb b6 = krb.b(knz.a.b());
        b6.a = sb10;
        a21.a(b6);
        a(sQLiteDatabase2, "ParentDriveIdView", (kqx) a21);
        krc a22 = krc.a("EntryView");
        a22.b();
        krb b7 = krb.b(knz.a.b());
        b7.a = sb10;
        a22.a(b7);
        a(sQLiteDatabase2, "ParentEntryView", (kqx) a22);
        a(sQLiteDatabase2, "ScopedParentEntryView", "ParentEntryView");
        krc a23 = krc.a(knf.a);
        a23.a(a2, a2);
        String a24 = kne.PINNED.aB.a();
        String a25 = a(a2);
        StringBuilder sb11 = new StringBuilder(String.valueOf(a24).length() + 10 + String.valueOf(a25).length());
        sb11.append(a24);
        sb11.append(" != 0 AND ");
        sb11.append(a25);
        a23.b(sb11.toString());
        kqv kqv = kqv.UNION_ALL;
        krc a26 = krc.a(knf.a);
        a26.a((lsb) kne.INSYNC_CONTENT_HASH);
        String a27 = a((lsb) kne.INSYNC_CONTENT_HASH);
        String a28 = a((lsb) kne.LAST_CONTENT_ACTION_ID);
        StringBuilder sb12 = new StringBuilder(String.valueOf(a27).length() + 5 + String.valueOf(a28).length());
        sb12.append(a27);
        sb12.append(" AND ");
        sb12.append(a28);
        a26.b(sb12.toString());
        kqw a29 = a23.a(kqv, (kqx) a26);
        kqv kqv2 = kqv.UNION_ALL;
        krc a30 = krc.a(kou.a);
        a30.a((lsb) kot.CONTENT_HASH);
        a30.b(a((lsb) kot.CONTENT_HASH));
        kqw a31 = a29.a(kqv2, a30);
        kqv kqv3 = kqv.UNION_ALL;
        krc a32 = krc.a(kou.a);
        a32.a((lsb) kot.BASE_CONTENT_HASH);
        a32.b(a((lsb) kot.BASE_CONTENT_HASH));
        kqw a33 = a31.a(kqv3, a32);
        kqv kqv4 = kqv.UNION_ALL;
        krc a34 = krc.a(koz.a);
        a34.a((lsb) koy.CONTENT_HASH);
        a34.b(a((lsb) koy.CONTENT_HASH));
        kqw a35 = a33.a(kqv4, a34);
        kqv kqv5 = kqv.UNION_ALL;
        krc a36 = krc.a(koq.a);
        a36.a((lsb) kop.CONTENT_HASH);
        a(sQLiteDatabase2, "CannotDeleteFileContentHashView", (kqx) a35.a(kqv5, a36));
        krc a37 = krc.a(knf.a);
        a37.a(a2, a2);
        a37.b(a(a2));
        kqv kqv6 = kqv.UNION_ALL;
        krc a38 = krc.a(knf.a);
        a38.a((lsb) kne.INSYNC_CONTENT_HASH);
        a38.b(a((lsb) kne.INSYNC_CONTENT_HASH));
        kqw a39 = a37.a(kqv6, (kqx) a38);
        kqv kqv7 = kqv.UNION_ALL;
        krc a40 = krc.a(kou.a);
        a40.a((lsb) kot.CONTENT_HASH);
        a40.b(a((lsb) kot.CONTENT_HASH));
        kqw a41 = a39.a(kqv7, a40);
        kqv kqv8 = kqv.UNION_ALL;
        krc a42 = krc.a(kou.a);
        a42.a((lsb) kot.BASE_CONTENT_HASH);
        a42.b(a((lsb) kot.BASE_CONTENT_HASH));
        kqw a43 = a41.a(kqv8, a42);
        kqv kqv9 = kqv.UNION_ALL;
        krc a44 = krc.a(koz.a);
        a44.a((lsb) koy.CONTENT_HASH);
        a44.b(a((lsb) koy.CONTENT_HASH));
        kqw a45 = a43.a(kqv9, a44);
        kqv kqv10 = kqv.UNION_ALL;
        krc a46 = krc.a(kpx.a);
        a46.a((lsb) kpw.CONTENT_HASH);
        a46.b(a((lsb) kpw.CONTENT_HASH));
        a(sQLiteDatabase2, "ReferencedFileContentHashView", (kqx) a45.a(kqv10, a46));
        krc a47 = krc.a(knk.a);
        a47.a((lsb) knj.CONTENT_HASH);
        a47.b(a((lsb) knj.CONTENT_HASH));
        kqv kqv11 = kqv.EXCEPT;
        krc a48 = krc.a("ReferencedFileContentHashView");
        a48.b();
        a(sQLiteDatabase2, "WipeoutFileContentHashView", (kqx) a47.a(kqv11, (kqx) a48));
        krc a49 = krc.a(knk.a);
        a49.a((lsb) knj.CONTENT_HASH);
        a49.b(a((lsb) knj.CONTENT_HASH));
        kqv kqv12 = kqv.UNION_ALL;
        krc a50 = krc.a(kpx.a);
        a50.b(a((lsb) kpw.CONTENT_HASH));
        a50.a((lsb) kpw.CONTENT_HASH);
        kqw a51 = a49.a(kqv12, (kqx) a50);
        kqv kqv13 = kqv.EXCEPT;
        krc a52 = krc.a("CannotDeleteFileContentHashView");
        a52.b();
        kqw a53 = a51.a(kqv13, a52);
        kqv kqv14 = kqv.EXCEPT;
        krc a54 = krc.a("WipeoutFileContentHashView");
        a54.b();
        a(sQLiteDatabase2, "CachedFileContentHashView", (kqx) a53.a(kqv14, a54));
        String a55 = knj.INTERNAL_FILE_NAME.k.a();
        String b8 = knk.a.b();
        String a56 = knj.SHARED_FILE_NAME.k.a();
        String b9 = knk.a.b();
        String a57 = klu.FILENAME.b.a();
        String b10 = klv.a.b();
        int length3 = String.valueOf(a55).length();
        int length4 = String.valueOf(b8).length();
        int length5 = String.valueOf(a56).length();
        int length6 = String.valueOf(b9).length();
        StringBuilder sb13 = new StringBuilder(length3 + 179 + length4 + length5 + length6 + String.valueOf(a57).length() + String.valueOf(b10).length());
        sb13.append("CREATE VIEW IF NOT EXISTS CannotDeleteFilenameView AS SELECT ");
        sb13.append(a55);
        sb13.append(" AS filename FROM ");
        sb13.append(b8);
        sb13.append(" UNION ALL SELECT ");
        sb13.append(a56);
        sb13.append(" AS filename FROM ");
        sb13.append(b9);
        sb13.append(" UNION ALL SELECT ");
        sb13.append(a57);
        sb13.append(" AS filename FROM ");
        sb13.append(b10);
        sb13.append(" WHERE filename IS NOT NULL;");
        sQLiteDatabase2.execSQL(sb13.toString());
        String b11 = knk.a.b();
        String a58 = knj.INTERNAL_FILE_NAME.k.a();
        String a59 = knj.LAST_ACCESSED.k.a();
        int length7 = String.valueOf(b11).length();
        StringBuilder sb14 = new StringBuilder(length7 + 97 + String.valueOf(a58).length() + String.valueOf(a59).length());
        sb14.append("CREATE VIEW IF NOT EXISTS InternalContentView AS SELECT * FROM ");
        sb14.append(b11);
        sb14.append(" WHERE ");
        sb14.append(a58);
        sb14.append(" IS NOT NULL ORDER BY ");
        sb14.append(a59);
        sb14.append(" ASC;");
        sQLiteDatabase2.execSQL(sb14.toString());
        b(sQLiteDatabase2, "InternalContentSizeView", "InternalContentView");
        String b12 = knk.a.b();
        String a60 = knj.SHARED_FILE_NAME.k.a();
        String a61 = knj.LAST_ACCESSED.k.a();
        int length8 = String.valueOf(b12).length();
        StringBuilder sb15 = new StringBuilder(length8 + 95 + String.valueOf(a60).length() + String.valueOf(a61).length());
        sb15.append("CREATE VIEW IF NOT EXISTS SharedContentView AS SELECT * FROM ");
        sb15.append(b12);
        sb15.append(" WHERE ");
        sb15.append(a60);
        sb15.append(" IS NOT NULL ORDER BY ");
        sb15.append(a61);
        sb15.append(" ASC;");
        sQLiteDatabase2.execSQL(sb15.toString());
        b(sQLiteDatabase2, "SharedContentSizeView", "SharedContentView");
        String a62 = knj.CONTENT_HASH.k.a();
        String a63 = knj.SHARED_FILE_NAME.k.a();
        String a64 = knj.LAST_ACCESSED.k.a();
        int length9 = String.valueOf(a62).length();
        StringBuilder sb16 = new StringBuilder(length9 + 155 + String.valueOf(a63).length() + String.valueOf(a64).length());
        sb16.append("CREATE VIEW IF NOT EXISTS InternalCachedContentView AS SELECT * FROM InternalContentView WHERE ");
        sb16.append(a62);
        sb16.append(" IN CachedFileContentHashView ORDER BY ");
        sb16.append(a63);
        sb16.append(" IS NOT NULL , ");
        sb16.append(a64);
        sb16.append(" ASC ;");
        sQLiteDatabase2.execSQL(sb16.toString());
        b(sQLiteDatabase2, "InternalCachedContentSizeView", "InternalCachedContentView");
        String a65 = knj.CONTENT_HASH.k.a();
        StringBuilder sb17 = new StringBuilder(String.valueOf(a65).length() + 121);
        sb17.append("CREATE VIEW IF NOT EXISTS SharedCachedContentView AS SELECT * FROM SharedContentView WHERE ");
        sb17.append(a65);
        sb17.append(" IN CachedFileContentHashView;");
        sQLiteDatabase2.execSQL(sb17.toString());
        b(sQLiteDatabase2, "SharedCachedContentSizeView", "SharedCachedContentView");
        krc a66 = krc.a("EntryView");
        a66.b();
        String a67 = kne.PINNED.aB.a();
        StringBuilder sb18 = new StringBuilder(String.valueOf(a67).length() + 13 + String.valueOf(format).length());
        sb18.append(a67);
        sb18.append(" = 1 AND NOT ");
        sb18.append(format);
        a66.b(sb18.toString());
        a66.b.add(String.valueOf(String.valueOf(a2).concat(" IS NULL")).concat(" DESC"));
        a(sQLiteDatabase2, "PinnedDownloadRequiredView", (kqx) a66);
        String format2 = String.format("DELETE FROM %s WHERE %s IS NOT NULL AND NOT EXISTS (SELECT 1 FROM %s INNER JOIN %s ON %s = %s WHERE %s = %s AND %s = %s);", new Object[]{knf.a.b(), kne.APPDATA_OWNER_SDK_APP_ID.aB.b(), kmk.a.b(), kmg.a.b(), kmj.ACCOUNT_ID.c.b(), kmf.ACCOUNT_ID.h.b(), kmk.a.a.b(), kne.ENTRY_ID.aB.b(), kmf.SDK_APP_ID.h.b(), kne.APPDATA_OWNER_SDK_APP_ID.aB.b()});
        String b13 = kmg.a.b();
        StringBuilder sb19 = new StringBuilder(String.valueOf(b13).length() + 74 + String.valueOf(format2).length());
        sb19.append("CREATE TRIGGER IF NOT EXISTS OnDeleteDriveApp AFTER DELETE ON ");
        sb19.append(b13);
        sb19.append(" BEGIN ");
        sb19.append(format2);
        sb19.append(" END;");
        sQLiteDatabase2.execSQL(sb19.toString());
    }

    private static String a(lsb lsb) {
        return a(((kqh) lsb.b()).a());
    }

    private static void a(SQLiteDatabase sQLiteDatabase, String str, String str2) {
        krc a2 = krc.a(str2);
        a2.b();
        krb a3 = krb.a(kmt.a.b());
        String b2 = kms.ENTRY_ID.c.b();
        String a4 = kne.ENTRY_ID.aB.a();
        int length = String.valueOf(b2).length();
        StringBuilder sb = new StringBuilder(length + 4 + str2.length() + String.valueOf(a4).length());
        sb.append(b2);
        sb.append(" = ");
        sb.append(str2);
        sb.append(".");
        sb.append(a4);
        a3.a = sb.toString();
        a2.a(a3);
        a(sQLiteDatabase, str, (kqx) a2);
    }

    /* access modifiers changed from: protected */
    public final void b(SQLiteDatabase sQLiteDatabase) {
        if (!sQLiteDatabase.isReadOnly()) {
            sQLiteDatabase.execSQL("PRAGMA foreign_keys=ON;");
        }
    }

    private static void a(SQLiteDatabase sQLiteDatabase, String str, kqx kqx) {
        String str2;
        krd krd = new krd();
        krd.b = str;
        krd.a = true;
        krd.c = kqx;
        iva.a((Object) krd.b, (Object) "Must set the name of the VIEW being created");
        iva.a((Object) krd.c, (Object) "Must set the select statement for the VIEW being created.");
        if (!krd.a) {
            str2 = "'";
        } else {
            str2 = "IF NOT EXISTS '";
        }
        String str3 = krd.b;
        String a2 = krd.c.a();
        int length = str2.length();
        StringBuilder sb = new StringBuilder(length + 17 + String.valueOf(str3).length() + String.valueOf(a2).length());
        sb.append("CREATE VIEW ");
        sb.append(str2);
        sb.append(str3);
        sb.append("' AS ");
        sb.append(a2);
        sQLiteDatabase.execSQL(sb.toString());
    }

    /* access modifiers changed from: protected */
    public final void a() {
        this.b = this.a.b();
    }
}
