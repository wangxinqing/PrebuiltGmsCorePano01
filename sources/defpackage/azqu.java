package defpackage;

/* renamed from: azqu  reason: default package */
/* compiled from: :com.google.android.gms@201216073@20.12.16 (080306-306753009) */
public final class azqu implements azqr {
    public static final agvx a;
    public static final agvx b;
    public static final agvx c;
    public static final agvx d;
    public static final agvx e;
    public static final agvx f;
    public static final agvx g;
    public static final agvx h;
    public static final agvx i;
    public static final agvx j;
    public static final agvx k;
    public static final agvx l;
    public static final agvx m;
    public static final agvx n;
    public static final agvx o;
    public static final agvx p;
    public static final agvx q;

    /* JADX WARNING: type inference failed for: r5v3, types: [byte[]] */
    static {
        agvw agvw = new agvw(agvj.a("com.google.android.gms.tron.metrics"));
        a = agvw.c("Tron__alarm_mixture_weight");
        b = agvw.a("Tron__blocking_read_retry_limit", 10);
        c = agvw.a("Tron__blocking_read_retry_pause_ms", 60000);
        d = agvw.a("Tron__clearcut_qos_tier", 0);
        e = agvw.a("Tron__debug_enable", false);
        f = agvw.a("Tron__eventlog_collection_empty_retry_ms", 900000);
        g = agvw.a("Tron__eventlog_collection_enable", true);
        h = agvw.a("Tron__eventlog_collection_maximum_period_ms", 21600001);
        i = agvw.a("Tron__eventlog_collection_minimum_period_ms", 300000);
        try {
            j = agvw.a("Tron__field_config", bazf.a(new byte[]{10, 7, 8, -70, 6, 16, -62, -124, 61, 10, 7, 8, -69, 6, 16, -63, -124, 61, 10, 7, 8, -71, 6, 16, -60, -124, 61, 10, 7, 8, -65, 2, 16, -55, -124, 61, 10, 7, 8, -59, 2, 16, -50, -124, 61, 10, 7, 8, -25, 6, 16, -49, -124, 61, 10, 6, 8, -64, 2, 16, -9, 5, 10, 6, 8, -120, 7, 16, -97, 6, 10, 7, 8, -119, 7, 16, -63, -124, 61, 10, 7, 8, -63, 2, 16, -56, -124, 61, 10, 7, 8, -62, 2, 16, -57, -124, 61, 10, 7, 8, -123, 7, 16, -57, -124, 61, 10, 6, 8, -122, 7, 16, -9, 5, 10, 7, 8, -103, 6, 16, -57, -124, 61, 10, 7, 8, -102, 6, 16, -55, -124, 61, 10, 7, 8, -101, 6, 16, -56, -124, 61, 10, 7, 8, -100, 6, 16, -54, -124, 61, 10, 7, 8, -99, 6, 16, -53, -124, 61, 10, 7, 8, -98, 6, 16, -51, -124, 61, 10, 7, 8, -71, 6, 16, -60, -124, 61, 10, 7, 8, -115, 7, 16, -63, -124, 61, 10, 6, 8, -113, 7, 16, -9, 5, 10, 7, 8, -110, 7, 16, -63, -124, 61, 10, 6, 8, -109, 7, 16, -9, 5, 10, 7, 8, -107, 7, 16, -63, -124, 61, 10, 7, 8, -63, 6, 16, -63, -124, 61, 10, 8, 8, -31, 6, 16, -112, -83, -30, 4, 10, 7, 8, -121, 7, 16, -47, -124, 61, 10, 7, 8, -39, 6, 16, -40, -124, 61, 10, 7, 8, -78, 7, 16, -39, -124, 61, 10, 7, 8, -36, 6, 16, -39, -124, 61, 10, 7, 8, -64, 6, 16, -63, -124, 61, 10, 7, 8, -61, 8, 16, -42, -124, 61, 10, 7, 8, -79, 7, 16, -43, -124, 61, 10, 7, 8, -60, 2, 16, -63, -124, 61, 10, 6, 8, -69, 8, 16, -9, 5, 10, 7, 8, -54, 6, 16, -51, -124, 61, 10, 7, 8, -22, 7, 16, -63, -124, 61, 10, 7, 8, -23, 7, 16, -38, -124, 61, 10, 7, 8, -65, 8, 16, -51, -124, 61, 10, 7, 8, -25, 6, 16, -49, -124, 61, 10, 7, 8, -66, 8, 16, -63, -124, 61, 10, 7, 8, -42, 6, 16, -49, -124, 61, 10, 7, 8, -30, 7, 16, -57, -124, 61, 10, 7, 8, -63, 8, 16, -63, -124, 61, 10, 7, 8, -29, 7, 16, -60, -124, 61, 10, 7, 8, -35, 8, 16, -57, -124, 61, 10, 7, 8, -34, 8, 16, -56, -124, 61, 10, 7, 8, -32, 8, 16, -51, -124, 61, 10, 7, 8, -31, 8, 16, -49, -124, 61, 10, 7, 8, -30, 8, 16, -63, -124, 61, 10, 7, 8, -29, 8, 16, -62, -124, 61, 10, 6, 8, -109, 7, 16, -9, 5, 10, 7, 8, -110, 7, 16, -63, -124, 61, 10, 7, 8, -53, 8, 16, -41, -124, 61, 10, 8, 8, -81, 7, 16, -112, -83, -30, 4, 10, 7, 8, -61, 8, 16, -42, -124, 61, 10, 7, 8, -91, 7, 16, -54, -124, 61, 10, 7, 8, -92, 7, 16, -63, -124, 61, 10, 7, 8, -57, 8, 16, -51, -124, 61, 10, 7, 8, -58, 8, 16, -63, -124, 61, 10, 7, 8, -27, 8, 16, -63, -124, 61, 10, 6, 8, -22, 8, 16, -9, 5, 10, 6, 8, -46, 9, 16, -9, 5, 10, 7, 8, -38, 6, 16, -38, -124, 61, 10, 7, 8, -33, 8, 16, -36, -124, 61, 10, 7, 8, -26, 9, 16, -35, -124, 61, 10, 7, 8, -25, 9, 16, -34, -124, 61, 10, 7, 8, -18, 9, 16, -24, -124, 61, 10, 7, 8, -30, 9, 16, -33, -124, 61, 10, 7, 8, -29, 9, 16, -32, -124, 61, 10, 7, 8, -28, 9, 16, -31, -124, 61, 10, 7, 8, -27, 9, 16, -30, -124, 61, 10, 7, 8, -24, 9, 16, -29, -124, 61, 10, 7, 8, -96, 7, 16, -63, -124, 61, 10, 7, 8, -97, 7, 16, -51, -124, 61, 10, 7, 8, -12, 8, 16, -51, -124, 61, 10, 7, 8, -104, 10, 16, -57, -124, 61, 10, 7, 8, -105, 10, 16, -51, -124, 61, 10, 7, 8, -103, 10, 16, -33, -124, 61, 10, 7, 8, -102, 10, 16, -32, -124, 61, 10, 7, 8, -101, 10, 16, -31, -124, 61, 10, 7, 8, -100, 10, 16, -30, -124, 61, 10, 7, 8, -94, 10, 16, -57, -124, 61, 10, 7, 8, -93, 10, 16, -28, -124, 61, 10, 7, 8, -92, 10, 16, -27, -124, 61, 10, 7, 8, -91, 10, 16, -26, -124, 61, 10, 7, 8, -90, 10, 16, -35, -124, 61, 10, 7, 8, -89, 10, 16, -36, -124, 61, 10, 7, 8, -79, 10, 16, -51, -124, 61, 10, 7, 8, -82, 10, 16, -63, -124, 61, 10, 7, 8, -97, 10, 16, -21, -124, 61, 10, 7, 8, -77, 7, 16, -22, -124, 61, 10, 6, 8, -9, 9, 16, -9, 5, 10, 7, 8, -7, 8, 16, -57, -124, 61, 10, 6, 8, -6, 9, 16, -9, 5, 10, 7, 8, -75, 7, 16, -53, -124, 61, 10, 6, 8, -116, 7, 16, -97, 6, 10, 7, 8, -49, 10, 16, -57, -124, 61, 10, 6, 8, -42, 10, 16, -9, 5, 10, 7, 8, -24, 10, 16, -23, -124, 61, 10, 7, 8, -87, 10, 16, -54, -124, 61, 10, 7, 8, -88, 10, 16, -51, -124, 61, 10, 7, 8, -13, 10, 16, -23, -124, 61, 10, 6, 8, -16, 10, 16, -9, 5, 10, 7, 8, -14, 10, 16, -49, -124, 61, 10, 7, 8, -15, 10, 16, -63, -124, 61, 10, 6, 8, -115, 11, 16, -9, 5, 10, 7, 8, -118, 11, 16, -33, -124, 61, 10, 7, 8, -117, 11, 16, -32, -124, 61, 10, 7, 8, -116, 11, 16, -57, -124, 61, 10, 7, 8, -122, 11, 16, -51, -124, 61, 10, 7, 8, -81, 11, 16, -63, -124, 61, 10, 7, 8, -84, 11, 16, -38, -124, 61, 10, 7, 8, -83, 11, 16, -33, -124, 61, 10, 7, 8, -82, 11, 16, -31, -124, 61, 10, 7, 8, -111, 11, 16, -54, -124, 61, 10, 6, 8, -108, 11, 16, -9, 5, 10, 7, 8, -86, 11, 16, -54, -124, 61, 10, 7, 8, -107, 11, 16, -51, -124, 61, 10, 6, 8, -105, 11, 16, -9, 5, 10, 7, 8, -104, 11, 16, -54, -124, 61, 10, 6, 8, -102, 11, 16, -9, 5, 10, 7, 8, -101, 11, 16, -57, -124, 61, 10, 7, 8, -100, 11, 16, -56, -124, 61, 10, 7, 8, -87, 11, 16, -55, -124, 61, 10, 7, 8, -99, 11, 16, -54, -124, 61, 10, 7, 8, -88, 11, 16, -51, -124, 61, 10, 7, 8, -97, 11, 16, -53, -124, 61, 10, 6, 8, -93, 11, 16, -9, 5, 10, 7, 8, -92, 11, 16, -23, -124, 61, 10, 6, 8, -90, 11, 16, -9, 5, 10, 7, 8, -89, 11, 16, -54, -124, 61, 10, 6, 8, -21, 11, 16, -90, 6, 10, 6, 8, -22, 11, 16, -9, 5, 10, 7, 8, -111, 12, 16, -57, -124, 61, 10, 7, 8, -116, 12, 16, -55, -124, 61, 10, 7, 8, -20, 11, 16, -54, -124, 61, 10, 7, 8, -114, 12, 16, -53, -124, 61, 10, 7, 8, -19, 11, 16, -51, -124, 61, 10, 7, 8, -16, 11, 16, -50, -124, 61, 10, 7, 8, -115, 12, 16, -49, -124, 61, 10, 7, 8, -18, 11, 16, -62, -124, 61, 10, 7, 8, -17, 11, 16, -63, -124, 61, 10, 6, 8, -14, 11, 16, -97, 6, 10, 7, 8, -127, 12, 16, -46, -124, 61, 10, 7, 8, -126, 12, 16, -45, -124, 61, 10, 7, 8, -125, 12, 16, -44, -124, 61, 10, 7, 8, -10, 11, 16, -41, -124, 61, 10, 7, 8, -8, 11, 16, -40, -124, 61, 10, 7, 8, -7, 11, 16, -39, -124, 61, 10, 7, 8, -15, 11, 16, -38, -124, 61, 10, 7, 8, -119, 12, 16, -35, -124, 61, 10, 7, 8, -11, 11, 16, -34, -124, 61, 10, 7, 8, -13, 11, 16, -33, -124, 61, 10, 7, 8, -12, 11, 16, -32, -124, 61, 10, 7, 8, -9, 11, 16, -31, -124, 61, 10, 7, 8, -6, 11, 16, -30, -124, 61, 10, 7, 8, -5, 11, 16, -28, -124, 61, 10, 7, 8, -4, 11, 16, -27, -124, 61, 10, 7, 8, -3, 11, 16, -26, -124, 61, 10, 7, 8, -123, 12, 16, -25, -124, 61, 10, 7, 8, -121, 12, 16, -24, -124, 61, 10, 7, 8, -2, 11, 16, -23, -124, 61, 10, 7, 8, -1, 11, 16, -22, -124, 61, 10, 7, 8, Byte.MIN_VALUE, 12, 16, -21, -124, 61, 10, 7, 8, -124, 12, 16, -20, -124, 61, 10, 7, 8, -122, 12, 16, -19, -124, 61, 10, 7, 8, -118, 12, 16, -18, -124, 61, 10, 7, 8, -117, 12, 16, -17, -124, 61, 10, 7, 8, -113, 12, 16, -16, -124, 61, 10, 7, 8, -112, 12, 16, -15, -124, 61, 16, 1}), azqs.a);
            k = agvw.a("Tron__lockscreen_events_enable", true);
            l = agvw.a("Tron__metrics_reader_enabled", true);
            m = agvw.a("Tron__notification_events_enable", true);
            n = agvw.a("Tron__notification_id_enable", true);
            o = agvw.a("Tron__notification_tag_hashing", false);
            p = agvw.a("Tron__sysui_events_enable", true);
            try {
                q = agvw.a("Tron__view_rate", bazg.a(new byte[]{10, 10, 8, 1, 16, -66, 2, 29, 0, 0, Byte.MIN_VALUE, 63, 10, 11, 8, -65, 2, 16, -59, 2, 29, 0, 0, 0, 0, 10, 11, 8, -58, 2, 16, -60, 8, 29, 0, 0, Byte.MIN_VALUE, 63, 10, 11, 8, -59, 8, 16, -57, 8, 29, 0, 0, 0, 0, 10, 13, 8, -56, 8, 16, -127, Byte.MIN_VALUE, Byte.MIN_VALUE, 32, 29, 0, 0, Byte.MIN_VALUE, 63}), azqt.a);
            } catch (auda e2) {
                throw new AssertionError("Could not parse proto flag \"Tron__view_rate\"");
            }
        } catch (auda e3) {
            throw new AssertionError("Could not parse proto flag \"Tron__field_config\"");
        }
    }

    public final double a() {
        return ((Double) a.c()).doubleValue();
    }

    public final long b() {
        return ((Long) b.c()).longValue();
    }

    public final long c() {
        return ((Long) c.c()).longValue();
    }

    public final long d() {
        return ((Long) d.c()).longValue();
    }

    public final boolean e() {
        return ((Boolean) e.c()).booleanValue();
    }

    public final long f() {
        return ((Long) f.c()).longValue();
    }

    public final boolean g() {
        return ((Boolean) g.c()).booleanValue();
    }

    public final long h() {
        return ((Long) h.c()).longValue();
    }

    public final long i() {
        return ((Long) i.c()).longValue();
    }

    public final bazf j() {
        return (bazf) j.c();
    }

    public final boolean k() {
        return ((Boolean) k.c()).booleanValue();
    }

    public final boolean l() {
        return ((Boolean) l.c()).booleanValue();
    }

    public final boolean m() {
        return ((Boolean) m.c()).booleanValue();
    }

    public final boolean n() {
        return ((Boolean) n.c()).booleanValue();
    }

    public final boolean o() {
        return ((Boolean) o.c()).booleanValue();
    }

    public final boolean p() {
        return ((Boolean) p.c()).booleanValue();
    }

    public final bazg q() {
        return (bazg) q.c();
    }
}
